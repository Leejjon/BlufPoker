project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        implementation project(":core")

        implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        testImplementation 'junit:junit:4.12'
        testImplementation "org.mockito:mockito-core:2.10.0"
        androidTestImplementation 'com.android.support:support-annotations:27.1.1'
        androidTestImplementation 'com.android.support.test:runner:1.0.1'
        androidTestImplementation 'com.android.support.test:rules:1.0.1'
    }
}

android {
    buildToolsVersion "27.0.3"
    compileSdkVersion 27

    defaultConfig {
        applicationId "net.leejjon.blufpoker.android"
        minSdkVersion 24
        targetSdkVersion 27
        versionCode 21
        versionName "5.0"

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        testOptions {
            // Currently have no Android specific unit tests.
            unitTests.returnDefaultValues = true
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("src/main/jniLibs/armeabi/").mkdirs();
    file("src/main/jniLibs/armeabi-v7a/").mkdirs();
    file("src/main/jniLibs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("src/main/jniLibs/armeabi")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'net.leejjon.bluffpoker.android/net.leejjon.bluffpoker.android.AndroidLauncher'
}
dependencies {
}